# -*- coding: utf-8 -*-
"""IAFlask_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tlGR0jZNRjkxRFQUXu1GkIKTDuTSjaEl
"""

from sklearn import linear_model
import xgboost as xg
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder # codificar valores nominais para numericos

url = "https://raw.githubusercontent.com/jinkijack/IAFlaskDataSet/main/vgsales.csv"
dados = pd.read_csv(url)

print(dados['Platform'])

print(dados.info)

#print(dados.head)
#encoder plataformas genero e publisher

mapear = LabelEncoder()
dados['platform_map'] = mapear.fit_transform(dados['Platform']) # mapeamento de valores nominais para numerico
platforms = dict(zip( np.unique(dados['platform_map']),np.unique(dados['Platform']) ))
print(platforms)

dados['genre_map'] = mapear.fit_transform(dados['Genre']) # mapeamento de valores nominais para numerico
#print(dados['cidade_map'])
#print(dados['cidade'])
#print(dados.info())
genre = dict(zip( np.unique(dados['genre_map']),np.unique(dados['Genre']) ))
print(genre)

remover = ['Rank', 'Name','Platform','Year','Genre','JP_Sales','Other_Sales','Publisher','Global_Sales']#'','NA_Sales','EU_Sales'
x = dados.drop(remover,axis=1)
y = dados['Global_Sales']
x =x.values
y=y.values

#print(genre,platforms)
print(y)
print(dados.head)

from sklearn.model_selection import train_test_split
x_treino, x_teste, y_treino, y_teste = train_test_split(x,y, test_size=0.3, random_state=42)

print(len(x_treino))

real = y_teste
clf = linear_model.LinearRegression()
clf = clf.fit(x_treino,y_treino)
print(clf.score(x_teste,y_teste))
preditos = clf.predict(x_teste)

tabela = pd.DataFrame({'Real':real[:25], 'Predito':preditos[:25]})
print(tabela)

clfXG = xg.XGBRegressor(objective='reg:squarederror')
clfXG.fit(x_treino,y_treino)
print(clfXG.score(x_teste,y_teste))
preditosXG = clfXG.predict(x_teste)

tabelaXG = pd.DataFrame({'Real':real[:25], 'Predito':preditosXG[:25]})
print(tabelaXG)

print(dados.info)

print(platforms)
a = int(input('Escolha a Platforma: '))
print(genre)
b = int(input('Escolha o Gênero:'))

c = float(input('Vendas no continente Norte Americano: '))

d = float(input('Vendas no continente Europeu: '))

pred = clfXG.predict([[c,d,a,b]])
print(pred[0])

import pickle
pickle.dump(clf, open('model.pkl','wb')) # salvando o modelo de Machine Learning

y1 = dados['genre_map']
remover1 = ['Rank', 'Name','Genre', 'Publisher','genre_map','Platform','Year']#'',,'JP_Sales','Other_Sales','NA_Sales','EU_Sales','Global_Sales'
x1 = dados.drop(remover1,axis=1)
y1=y1.values
x1=x1.values

from sklearn.model_selection import train_test_split
x_treino1, x_teste1, y_treino1, y_teste1 = train_test_split(x1,y1, test_size=0.3, random_state=42)

real1 = y_teste1
clf1 = linear_model.LinearRegression()
clf1 = clf1.fit(x_treino1,y_treino1)
print(clf1.score(x_teste1,y_teste1))
preditos1 = clf1.predict(x_teste1)
tabela1 = pd.DataFrame({'Real':real1[:25], 'Predito':preditos1[:25]})
print(tabela1)

from sklearn import tree
clf2 = tree.DecisionTreeClassifier() #definindo classificador
clf2 = clf2.fit(x_treino1, y_treino1) #treinando
preditos2 = clf2.predict(x_teste1) #gerando a predição
print("Preditos:", preditos2)
print("Real    :",y_teste1)
print(clf2.score(x_teste1,y_teste1))

tree.plot_tree(clf2)

from sklearn.naive_bayes import GaussianNB
from sklearn.metrics._plot.confusion_matrix import ConfusionMatrixDisplay
from sklearn.metrics import plot_confusion_matrix
clf3 = GaussianNB() #definindo classificador
clf3 = clf3.fit(x_treino1, y_treino1) #treinando
preditos3 = clf3.predict(x_teste1) #gerando a predição
print("Preditos:", preditos3)
print("Real    :",y_teste1)
print(clf3.score(x_teste1,y_teste1))
ConfusionMatrixDisplay.from_estimator(clf3,x_teste1,y_teste1)

